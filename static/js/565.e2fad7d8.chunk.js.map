{"version":3,"file":"static/js/565.e2fad7d8.chunk.js","mappings":"+IAqBA,UAbA,SAAkBA,GAAgB,IAAbC,EAAQD,EAARC,SAEnB,OADgBC,EAAAA,EAAAA,OAEPC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAH,SAAGA,KAEHE,EAAAA,EAAAA,KAACE,EAAAA,GAAQ,CAACC,GAAG,SAASC,SAAO,GAExC,C,8ICfMC,EAAY,UAEZN,EAAW,WAAH,OAASO,aAAaC,QAAQF,EAAW,EACjDG,EAAW,SAACC,GAAK,OAAKH,aAAaI,QAAQL,EAAWI,EAAO,EAC7DE,EAAa,WAAH,OAASL,aAAaM,WAAWP,EAAW,E,UCAtDQ,EAAOC,EAAAA,EAAAA,OAAa,CACxBC,QAAS,+BACTC,QAAS,MAGXH,EAAKI,aAAaC,QAAQC,KACxB,SAACC,GAEC,IAAMX,EAAQV,IAId,OAHIU,IACFW,EAAOC,QAAQC,cAAa,UAAAC,OAAad,IAEpCW,CACT,IACA,SAACI,GACC,OAAOC,QAAQC,OAAOF,EACxB,IAIFX,EAAKI,aAAaU,SAASR,KACzB,SAACQ,GAGC,OAAOA,EAASC,IAClB,IACA,SAACJ,GASC,OAN8B,MAA1BA,EAAMG,SAASE,QAIjBC,EAAAA,EAAAA,KAAa,UAERL,QAAQC,OAAOF,EACxB,G","sources":["components/AuthRoute/index.js","utils/token.js","utils/http.js"],"sourcesContent":["// 1. 判断token是否存在\n// 2. 如果存在 直接正常渲染\n// 3. 如果不存在 重定向到登录路由\n\n// 高阶组件:把一个组件当成另外一个组件的参数传入 然后通过一定的判断 返回新的组件\nimport { getToken } from \"@/utils\";\nimport { Navigate } from \"react-router-dom\";\n\nfunction AuthRoute({ children }) {\n  const isToken = getToken();\n  if (isToken) {\n    return <>{children}</>;\n  } else {\n    return <Navigate to=\"/login\" replace />;\n  }\n}\n\n// <AuthComponent> <Layout/> </AuthComponent>\n// 登录：<><Layout/></>\n// 非登录：<Navigate to=\"/login\" replace />\n\nexport default AuthRoute;\n","const TOKEN_KEY = \"geek_pc\";\n\nconst getToken = () => localStorage.getItem(TOKEN_KEY);\nconst setToken = (token) => localStorage.setItem(TOKEN_KEY, token);\nconst clearToken = () => localStorage.removeItem(TOKEN_KEY);\n\nexport { getToken, setToken, clearToken };\n","import axios from \"axios\";\nimport { getToken } from \"./token\";\nimport { history } from \"./history\";\n\nconst http = axios.create({\n  baseURL: \"http://geek.itheima.net/v1_0\",\n  timeout: 5000,\n});\n// 添加请求拦截器\nhttp.interceptors.request.use(\n  (config) => {\n    // if not login add token\n    const token = getToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 添加响应拦截器\nhttp.interceptors.response.use(\n  (response) => {\n    // 2xx 范围内的状态码都会触发该函数。\n    // 对响应数据做点什么\n    return response.data;\n  },\n  (error) => {\n    // 超出 2xx 范围的状态码都会触发该函数。\n    // 对响应错误做点什么\n    if (error.response.status === 401) {\n      // 删除token\n      //clearToken();\n      // 跳转到登录页\n      history.push(\"/login\");\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport { http };\n"],"names":["_ref","children","getToken","_jsx","_Fragment","Navigate","to","replace","TOKEN_KEY","localStorage","getItem","setToken","token","setItem","clearToken","removeItem","http","axios","baseURL","timeout","interceptors","request","use","config","headers","Authorization","concat","error","Promise","reject","response","data","status","history"],"sourceRoot":""}