{"version":3,"file":"static/js/802.63e6c9e1.chunk.js","mappings":"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","sources":["pages/Layout/index.js","store/loginStore.js","store/userStore.js","store/channelStore.js","store/index.js","utils/token.js","utils/http.js"],"sourcesContent":["import { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport { useStore } from \"@/store\";\nimport { Layout, Menu, Popconfirm } from \"antd\";\nimport {\n  HomeOutlined,\n  DiffOutlined,\n  EditOutlined,\n  LogoutOutlined,\n} from \"@ant-design/icons\";\nimport \"./index.scss\";\nimport { Outlet, Link, useLocation, useNavigate } from \"react-router-dom\";\n\nconst { Header, Sider } = Layout;\n\nconst GeekLayout = () => {\n  const { userStore, loginStore, channelStore } = useStore();\n  // 获取用户数据\n  useEffect(() => {\n    try {\n      userStore.getUserInfo();\n      channelStore.loadChannelList();\n    } catch {}\n  }, [userStore, channelStore]);\n  const location = useLocation();\n  // 这里是当前浏览器上的路径地址\n  const selectedKey = location.pathname;\n  const navigate = useNavigate();\n  const onLogout = () => {\n    loginStore.loginOut();\n    navigate(\"/login\");\n  };\n  return (\n    <Layout>\n      <Header className=\"header\">\n        <div className=\"logo\" />\n        <div className=\"user-info\">\n          <span className=\"user-name\">{userStore.userInfo.name}</span>\n          <span className=\"user-logout\">\n            <Popconfirm\n              title=\"是否确认退出？\"\n              okText=\"退出\"\n              cancelText=\"取消\"\n              onConfirm={onLogout}\n            >\n              <LogoutOutlined /> 退出\n            </Popconfirm>\n          </span>\n        </div>\n      </Header>\n      <Layout>\n        <Sider width={200} className=\"site-layout-background\">\n          <Menu\n            mode=\"inline\"\n            theme=\"dark\"\n            defaultSelectedKeys={[selectedKey]}\n            style={{ height: \"100%\", borderRight: 0 }}\n          >\n            <Menu.Item icon={<HomeOutlined />} key=\"1\">\n              <Link to=\"/\">数据概览</Link>\n            </Menu.Item>\n            <Menu.Item icon={<DiffOutlined />} key=\"2\">\n              <Link to=\"/article\">内容管理</Link>\n            </Menu.Item>\n            <Menu.Item icon={<EditOutlined />} key=\"3\">\n              <Link to=\"/publish\">发布文章</Link>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout className=\"layout-content\" style={{ padding: 20 }}>\n          <Outlet></Outlet>\n        </Layout>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default observer(GeekLayout);\n","// login module\nimport { makeAutoObservable } from \"mobx\";\nimport { http, setToken, getToken, clearToken } from \"@/utils\";\nclass LoginStore {\n  token = getToken() || \"\";\n  constructor() {\n    // 响应式\n    makeAutoObservable(this);\n  }\n  getToken = async ({ mobile, code }) => {\n    // 调用登录接口\n    const res = await http.post(\"http://geek.itheima.net/v1_0/authorizations\", {\n      mobile,\n      code,\n    });\n    // 存入token\n    this.token = res.data.token;\n    // 存入ls\n    setToken(this.token);\n  };\n  // 退出登录\n  loginOut = () => {\n    this.token = \"\";\n    clearToken();\n  };\n}\n\nexport default LoginStore;\n","// 用户模块\nimport { makeAutoObservable } from \"mobx\";\nimport { http } from \"@/utils\";\n\nclass UserStore {\n  userInfo = {};\n  constructor() {\n    makeAutoObservable(this);\n  }\n  getUserInfo = async () => {\n    const res = await http.get(\"/user/profile\");\n    this.userInfo = res.data;\n  };\n}\n\nexport default UserStore;\n","import { makeAutoObservable } from \"mobx\";\nimport { http } from \"@/utils\";\nclass ChannelStore {\n  channelList = [];\n  constructor() {\n    makeAutoObservable(this);\n  }\n  // article publish 哪里调用这个函数呢？\n  loadChannelList = async () => {\n    const res = await http.get(\"/channels\");\n    this.channelList = res.data.channels;\n  };\n}\n\nexport default ChannelStore;\n","import React from \"react\";\nimport LoginStore from \"./loginStore\";\nimport UserStore from \"./userStore\";\nimport ChannelStore from \"./channelStore\";\n\nclass RootStore {\n  // 组合模块\n  constructor() {\n    this.loginStore = new LoginStore();\n    this.userStore = new UserStore();\n    this.channelStore = new ChannelStore();\n  }\n}\n// 导入useStore方法供组件使用数据\nconst StoresContext = React.createContext(new RootStore());\nexport const useStore = () => React.useContext(StoresContext);\n","const TOKEN_KEY = \"geek_pc\";\n\nconst getToken = () => localStorage.getItem(TOKEN_KEY);\nconst setToken = (token) => localStorage.setItem(TOKEN_KEY, token);\nconst clearToken = () => localStorage.removeItem(TOKEN_KEY);\n\nexport { getToken, setToken, clearToken };\n","import axios from \"axios\";\nimport { getToken } from \"./token\";\nimport { history } from \"./history\";\n\nconst http = axios.create({\n  baseURL: \"http://geek.itheima.net/v1_0\",\n  timeout: 5000,\n});\n// 添加请求拦截器\nhttp.interceptors.request.use(\n  (config) => {\n    // if not login add token\n    const token = getToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 添加响应拦截器\nhttp.interceptors.response.use(\n  (response) => {\n    // 2xx 范围内的状态码都会触发该函数。\n    // 对响应数据做点什么\n    return response.data;\n  },\n  (error) => {\n    // 超出 2xx 范围的状态码都会触发该函数。\n    // 对响应错误做点什么\n    if (error.response.status === 401) {\n      // 删除token\n      //clearToken();\n      // 跳转到登录页\n      history.push(\"/login\");\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport { http };\n"],"names":["Header","Layout","Sider","observer","_useStore","useStore","userStore","loginStore","channelStore","useEffect","getUserInfo","loadChannelList","_unused","selectedKey","useLocation","pathname","navigate","useNavigate","_jsxs","children","className","_jsx","userInfo","name","Popconfirm","title","okText","cancelText","onConfirm","loginOut","LogoutOutlined","width","Menu","mode","theme","defaultSelectedKeys","style","height","borderRight","icon","HomeOutlined","Link","to","DiffOutlined","EditOutlined","padding","Outlet","LoginStore","_createClass","_this","_classCallCheck","token","getToken","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","mobile","code","res","wrap","_context","prev","next","http","sent","data","setToken","stop","_x","apply","arguments","clearToken","makeAutoObservable","this","UserStore","ChannelStore","channelList","channels","RootStore","StoresContext","React","TOKEN_KEY","localStorage","getItem","setItem","removeItem","axios","baseURL","timeout","interceptors","request","use","config","headers","Authorization","concat","error","Promise","reject","response","status","history"],"sourceRoot":""}